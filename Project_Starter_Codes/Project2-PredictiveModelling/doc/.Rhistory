fun = dt, args = list(df = 5)) +
stat_function(aes(x = x, linetype = "df = 30"),
fun = dt, args = list(df = 30)) +
stat_function(aes(x = x, linetype = "df = 100"),
fun = dt, args = list(df = 100)) +
labs(title = "Standard Normal and Student's T Densities", linetype = "Legend")
x <- rnorm(100)
e <- rnorm(100, sd = 2)
y <- 0.5 + 2*x + e
ggplot(data.frame(x = x, y = y)) +
geom_points(aes(x = x, y = y))
?geom_point
x <- rnorm(100)
e <- rnorm(100, sd = 2)
y <- 0.5 + 2*x + e
ggplot(data.frame(x = x, y = y)) +
geom_point(aes(x = x, y = y))
%-------------------------------------------------------------------
\begin{frame}[fragile]
\frametitle{Check Yourself}
\begin{block}{Tasks}
Suppose we want to simulate from the following linear model:
\[y = \beta_0 + \beta_1 x + \epsilon\]
where $\epsilon \sim \mathcal{N}(0, 2^2)$, $x \sim \mathcal{N}(0, 1)$, $\beta_0 = 0.5$, amd $\beta_1 = 2$.  Simulate 100 realizations from this model and then make a scatterplot of the $(x, y)$ pairs.
\end{block}
\note{
x <- rnorm(100)
e <- rnorm(100, sd = 2)
y <- 0.5 + 2*x + e
ggplot(data.frame(x = x, y = y)) +
geom_point(aes(x = x, y = y))
}
\end{frame}
n <- 1000
p <- c(0.1, 0.2, 0.7)
x <- sample(1:3, size = n, prob = p, replace = TRUE)
head(x, 10)
rbind(p, p.hat = table(x)/n)
n <- 10
table(floor(n*runif(100)))
n <- 10
samp <- 100
table(floor(n*runif(samp)))/samp
samp <- 10000
table(floor(n*runif(samp)))/samp
?dexp
lambda <- 2
n      <- 1000
u      <- runif(n) # Simulating uniform rvs
Finverse <- function(u, lambda) {
# Function for the inverse transform
return(ifelse((u < 0 | u > 1), 0, -(1/lambda)*log(1-u)))
}
x <- Finverse(u, lambda)
ggplot(data = data.frame(x)) +
geom_histogram(aes(x = x, y = ..density..)) +
stat_function(mapping = aes(x = x), fun = dexp,
args = list(rate = 2), color = "red") +
labs(title = "Normal Approximation to the Binomial")
ggplot(data = data.frame(x)) +
geom_histogram(aes(x = x, y = ..density..)) +
stat_function(mapping = aes(x = x), fun = dexp,
args = list(rate = 2), color = "red") +
labs(title = "Inverse Transform Method to Simulate Exponentials")
n         <- 1000
u         <- runif(n)
F.inverse <- function(u) {return(u^{1/3})}
x         <- F.inverse(u)
n         <- 1000
u         <- runif(n)
F.inverse <- function(u) {return(u^{1/3})}
x         <- F.inverse(u)
ggplot(data = data.frame(x)) +
geom_histogram(aes(x = x, y = ..density..)) +
stat_function(mapping = aes(x = x), fun = function(x) {3*x^2}, color = "red") +
labs(title = "Inverse Transform Method")
Finverse <- function(u, lambda) {
# Function for the inverse transform
stopifnot(u < 0 | u > 1)
return(-(1/lambda)*log(1-u))
}
Finverse(-1, 2)
Finverse <- function(u, lambda) {
# Function for the inverse transform
stopifnot(u > 0 | u < 1)
return(-(1/lambda)*log(1-u))
}
Finverse(-1, 2)
Finverse(u = -1, lambda = 2)
u <- 01
Finverse <- function(u, lambda) {
# Function for the inverse transform
stopifnot(u > 0 & u < 1)
return(-(1/lambda)*log(1-u))
}
Finverse(u = -1, lambda = 2)
lambda <- 2
n      <- 1000
u      <- runif(n) # Simulating uniform rvs
Finverse <- function(u, lambda) {
# Function for the inverse transform
stopifnot(u > 0 & u < 1)
return(-(1/lambda)*log(1-u))
}
x <- Finverse(u, lambda)
ggplot(data = data.frame(x)) +
geom_histogram(aes(x = x, y = ..density..)) +
stat_function(mapping = aes(x = x), fun = dexp,
args = list(rate = 2), color = "red") +
labs(title = "Inverse Transform Method to Simulate Exponentials")
?runif
p <- function(x) {sqrt(1 - x^2)}
val <- NULL
while(is.NULL(val)) {
x <- runif(min = -1, max = +1)
u <- runif
if (u <- p(x)) {val <- x}
}
??is.null
p <- function(x) {sqrt(1 - x^2)}
val <- NULL
while(is.null(val)) {
x <- runif(min = -1, max = +1)
u <- runif
if (u <- p(x)) {val <- x}
}
p <- function(x) {sqrt(1 - x^2)}
generate_one <- function(p_func) {
val <- NULL
while(is.null(val)) {
x <- runif(1, min = -1, max = +1)
u <- runif(1)
if (u <- p_func(x)) {val <- x}
}
return(val)
}
p <- function(x) {sqrt(1 - x^2)}
generate_one <- function(p_func) {
val <- NULL
while(is.null(val)) {
x <- runif(1, min = -1, max = +1)
u <- runif(1)
if (u <- p_func(x)) {val <- x}
}
return(val)
}
num <- 1000
samp <- rep(NA, num)
for (i in 1:num) {samp[i] <- generate_one(p)}
samp
hist(samp)
generate_one <- function() {
p <- function(x) {sqrt(1 - x^2)}
val <- NULL
while(is.null(val)) {
x <- runif(1, min = -1, max = +1)
u <- runif(1)
if (u <- p(x)) {val <- x}
}
return(val)
}
num <- 1000
samp <- rep(NA, num)
for (i in 1:num) {samp[i] <- generate_one(p)}
generate_one <- function() {
p <- function(x) {sqrt(1 - x^2)}
val <- NULL
while(is.null(val)) {
x <- runif(1, min = -1, max = +1)
u <- runif(1)
if (u <- p(x)) {val <- x}
}
return(val)
}
num <- 1000
samp <- rep(NA, num)
for (i in 1:num) {samp[i] <- generate_one()}
hist(samp)
p <- function(x) {sqrt(1 - x^2)}
generate_one <- function(p_func) {
val <- NULL
while(is.null(val)) {
x <- runif(1, min = -1, max = +1)
u <- runif(1)
if (u <= p_func(x)) {val <- x}
}
return(val)
}
num <- 1000
samp <- rep(NA, num)
for (i in 1:num) {samp[i] <- generate_one(p)}
generate_one <- function() {
p <- function(x) {sqrt(1 - x^2)}
val <- NULL
while (is.null(val)) {
x <- runif(1, min = -1, max = +1)
u <- runif(1)
if (u <= p(x)) {val <- x}
}
return(val)
}
num <- 1000
samp <- rep(NA, num)
for (i in 1:num) {samp[i] <- generate_one()}
hist(samp)
p <- function(x) {sqrt(1 - x^2)}
generate_one <- function(p_func) {
val <- NULL
while (is.null(val)) {
x <- runif(1, min = -1, max = +1)
u <- runif(1)
if (u <= p_func(x)) {val <- x}
}
return(val)
}
num <- 1000
samp <- rep(NA, num)
for (i in 1:num) {samp[i] <- generate_one(p)}
hist(samp)
?hist
curve (dbeta(x, 3, 6), add=TRUE, color = "red")
text(.6, 1, "target f", col = "red")
lines(c(0,0,1,1), c(0,3,3,0))
plot(c(0,1), c(0,3), ty="n", main="A Sample Distribution", ylab="Density f(x)", xlab="x")
curve (dbeta(x, 3, 6), add=TRUE, col = "red")
text(.6, 1, "target f", col = "red")
lines(c(0,0,1,1), c(0,3,3,0))
plot(c(0,1), c(0,3), ty="n", main="A Sample Distribution", ylab="Density f(x)", xlab="x")
curve (dbeta(x, 3, 6), add=TRUE, col = "red")
text(.6, 1, "target function f", col = "red")
text(.8, 2.7, "envelope function g")
lines(c(0,0,1,1), c(0,3,3,0))
plot(c(0,1), c(0,3), ty="n", main="A Sample Distribution", ylab="Density f(x)", xlab="x")
curve (dbeta(x, 3, 6), add=TRUE, col = "red")
text(.7, 1, "target function f", col = "red")
text(.8, 2.8, "envelope function g")
lines(c(0,0,1,1), c(0,3,3,0))
plot(c(0,1), c(0,3), ty="n", main="A Sample Distribution", ylab="Density f(x)", xlab="x")
curve (dbeta(x, 3, 6), add=TRUE, col = "red")
text(.65, 1, "target function f", col = "red")
text(.8, 2.8, "envelope function g")
lines(c(0,0,1,1), c(0,3,3,0))
x1       <- runif(300, min = 0, max = 1);
y1       <- runif(300, min = 0, max = 2.6)
selected <- y1 < dbeta(x1, 3, 6)
points (x1, y1, col=1+1*selected, cex=0.1)
plot(c(0,1), c(0,3), ty="n", main="A Sample Distribution", ylab="Density f(x)", xlab="x")
curve (dbeta(x, 3, 6), add=TRUE, col = "red")
text(.65, 1, "target function f", col = "red")
text(.8, 2.8, "envelope function g")
lines(c(0,0,1,1), c(0,2.6,2.6,0))
x1       <- runif(300, min = 0, max = 1);
y1       <- runif(300, min = 0, max = 2.6)
selected <- y1 < dbeta(x1, 3, 6)
points (x1, y1, col=1+1*selected, cex=0.1)
mean(selected)
accepted.points <- x1[selected]
plot(c(0,1), c(0,3), ty = "n", main = "A Sample Distribution",
ylab = "Density f(x)", xlab = "x")
points (x1, y1, col = 1+selected, cex=0.1)
plot(c(0,1), c(0,10), ty = "n", main = "A Sample Distribution",
ylab = "Density f(x)", xlab = "x")
curve (dbeta(x, 3, 6), add = TRUE, col = "red")
text(.65, 1, "target function f", col = "red")
text(.8, 2.8, "envelope function g")
lines(c(0,0,1,1), c(0,10,10,0))
x2       <- runif(100000, 0, 1)
y2       <- runif(100000, 0, 10)
selected <- y2 < dbeta(x2, 3, 6)
mean(selected)
plot(c(0,1), c(0,10), ty = "n", main = "A Sample Distribution",
ylab = "Density f(x)", xlab = "x")
curve (dbeta(x, 3, 6), add = TRUE, col = "red")
text(.65, 1, "target function f", col = "red")
text(.8, 9.8, "envelope function g")
lines(c(0,0,1,1), c(0,10,10,0))
plot(c(0,1), c(0,10), ty = "n", main = "A Sample Distribution",
ylab = "Density f(x)", xlab = "x")
curve (dbeta(x, 3, 6), add = TRUE, col = "red")
text(.65, 1, "target function f", col = "red")
text(.8, 9.7, "envelope function g")
lines(c(0,0,1,1), c(0,10,10,0))
x2       <- runif(100000, 0, 1)
y2       <- runif(100000, 0, 10)
selected <- y2 < dbeta(x2, 3, 6)
mean(selected) # Proportion selected
plot(c(0,1), c(0,6), ty="n", main="A Sample Distribution",
ylab="Density f(x)", xlab="x")
curve (dbeta(x, 3, 6), add=TRUE)
lines(c(0,0,1,1), c(0,3,3,0))
points (x2, y2, col=1+1*selected, cex=0.1)
plot(c(0,1), c(0,10), ty = "n", main = "A Sample Distribution",
ylab = "Density f(x)", xlab = "x")
curve (dbeta(x, 3, 6), add = TRUE, col = "red")
text(.65, 1, "target function f", col = "red")
text(.8, 9.7, "envelope function g")
lines(c(0,0,1,1), c(0,10,10,0))
x2       <- runif(100000, 0, 1)
y2       <- runif(100000, 0, 10)
selected <- y2 < dbeta(x2, 3, 6)
mean(selected) # Proportion selected
points (x2, y2, col=1+1*selected, cex=0.1)
f <- function(x) {
stopifnot(x > 0 & x < 1)
return(60*x^3*(1-x)^2)
}
x <- seq(0, 1, length = 100)
plot(x, f(x), type="l", ylab="f(x)")
f <- function(x) {
stopifnot(x >= 0 & x <= 1)
return(60*x^3*(1-x)^2)
}
x <- seq(0, 1, length = 100)
plot(x, f(x), type="l", ylab="f(x)")
lines(c(0, 0), c(0, f.max), lty = 1)
lines(c(1, 1), c(0, f,max), lty = 1)
lines(x, f.max, lty = 1)
x <- seq(0, 1, length = 100)
plot(x, f(x), type="l", ylab="f(x)")
xmax  <- 0.6
f.max <- 60*xmax^3*(1-xmax)^2
lines(c(0, 0), c(0, f.max), lty = 1)
lines(c(1, 1), c(0, f,max), lty = 1)
lines(x, f.max, lty = 1)
lines(c(0, 0), c(0, f.max), lty = 1)
lines(c(1, 1), c(0, f.max), lty = 1)
?hline
??hline
??abline
f <- function(x) {
stopifnot(x >= 0 & x <= 1)
return(60*x^3*(1-x)^2)
}
x <- seq(0, 1, length = 100)
plot(x, f(x), type="l", ylab="f(x)")
xmax  <- 0.6
f.max <- 60*xmax^3*(1-xmax)^2
lines(c(0, 0), c(0, f.max), lty = 1)
lines(c(1, 1), c(1, f.max), lty = 1)
lines(c(0, f.max), c(1, f.max), lty = 1)
lines(c(1, 0), c(1, f.max), lty = 1)
?lines
lines(c(0, 1), c(f.max, f.max), lty = 1)
lines(c(0, 0), c(0, f.max), lty = 1)
lines(c(0, 1), c(f.max, f.max), lty = 1)
lines(c(1, 1), c(0, f.max), lty = 1)
f <- function(x) {
stopifnot(x >= 0 & x <= 1)
return(60*x^3*(1-x)^2)
}
x <- seq(0, 1, length = 100)
plot(x, f(x), type="l", ylab="f(x)")
xmax  <- 0.6
f.max <- 60*xmax^3*(1-xmax)^2
lines(c(0, 0), c(0, f.max), lty = 1)
lines(c(0, 1), c(f.max, f.max), lty = 1)
lines(c(1, 1), c(f.max, 0), lty = 1)
f <- function(x) {
stopifnot(x >= 0 & x <= 1)
return(60*x^3*(1-x)^2)
}
x <- seq(0, 1, length = 100)
plot(x, f(x), type="l", ylab="f(x)", color = "red")
xmax  <- 0.6
f.max <- 60*xmax^3*(1-xmax)^2
lines(c(0, 0), c(0, f.max), lty = 1)
lines(c(0, 1), c(f.max, f.max), lty = 1)
lines(c(1, 1), c(f.max, 0), lty = 1)
f <- function(x) {
stopifnot(x >= 0 & x <= 1)
return(60*x^3*(1-x)^2)
}
x <- seq(0, 1, length = 100)
plot(x, f(x), type="l", ylab="f(x)", col = "red")
xmax  <- 0.6
f.max <- 60*xmax^3*(1-xmax)^2
lines(c(0, 0), c(0, f.max), lty = 1)
lines(c(0, 1), c(f.max, f.max), lty = 1)
lines(c(1, 1), c(f.max, 0), lty = 1)
n.samps <- 1000        # number of samples desired
n       <- 0		          # counter for number samples accepted
samps   <- numeric(n.samps) # initialize the vector of output
while (n < n.samps) {
x <- runif(1)    #random draw from g
u <- runif(1)
if (f.max*u < f(x)) {
n        <- n + 1
samps[n] <- x
}
}
x <- seq(0, 1, length = 100)
hist(samps, prob = T, ylab = "f(x)", xlab = "x",
main = "Histogram of draws from Beta(4,3)")
lines(x, dbeta(x, 4, 3), lty = 2)
grep ("[^a]", c('ahEl' , 'jajda' , 'AAe', 'a'))
grep ("^[^a]", c('ahEl' , 'jajda' , 'AAe', 'a'))
x <- rbinom(500, size = 20, p = .5)
ggplot(data.frame(x)) + geom_histogram(aes(x = x, y = ..density..))
library(ggplot2)
ggplot(data.frame(x)) + geom_histogram(aes(x = x, y = ..density..))
ggplot(data.frame(x)) + geom_histogram(aes(x = x, y = density))
?geom_histogram
ggplot(diamonds, aes(price, ..density.., colour = cut)) +
geom_freqpoly(binwidth = 500)
u <- runif(100)
x <- rep(2, 100)
x[u < .5] <- 1
x[u > .75] <- 3
table(x)
u <- runif(100)
x <- rep(2, 100)
x[u < .5] <- 1
x[u > .75] <- 3
table(x)/100
setwd("~/Downloads")
?rpart
??rpart
library(ada)
install.packages("ada")
library(ada)
?rpart
setwd("~/Documents/GitHub/Spring2018/Project_Starter_Codes/Project2-PredictiveModelling/doc")
setwd("~/Documents/GitHub/Spring2018/Project_Starter_Codes/Project2-PredictiveModelling/doc")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir  <- paste(experiment_dir, "train/", sep="")
img_test_dir   <- paste(experiment_dir, "test/", sep="")
img_train_dir
img_test_dir
run.cv            <- TRUE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test          <- TRUE # run evaluation on an independent test set
run.feature.test  <- TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels <- paste("GBM with depth =", model_values)
model_labels
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
head(label_train)
tail(label_train)
label_train <- as.numeric(unlist(label_train) == "9")
head(label_train)
tial(label_train)
tail(label_train)
img_dir <- img_train_dir
data_name = "zip"
set_name <- "train"
n_files <- length(list.files(img_dir))
img0 <-  readImage(paste0(img_dir, "img", "_", data_name, "_", set_name, "_", 1, ".jpg"))
img0
img0[1:16, 1:16]
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir, "train",
data_name = "zip", export = TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, "test",
data_name = "zip", export = TRUE))
}
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim = c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file = "../output/err_cv.RData")
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab = "Interaction Depth", ylab = "CV Error",
main = "Cross Validation Error", type = "n", ylim = c(0, 0.25))
points(model_values, err_cv[,1], col = "blue", pch=16)
lines(model_values, err_cv[,1], col = "blue")
arrows(model_values, err_cv[,1] - err_cv[,2], model_values, err_cv[,1] + err_cv[,2],
length = 0.1, angle = 90, code = 3)
#dev.off()
}
model_best <- model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[, 1])]
}
par_best <- list(depth = model_best)
par_best
tm_train <- NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
save(fit_train, file = "../output/fit_train.RData")
tm_test <- NA
if(run.test){
load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
